# The ESAPI validator does many security checks on input, such as canonicalization
# and whitelist validation. Note that all of these validation rules are applied *after*
# canonicalization. Double-encoded characters (even with different encodings involved,
# are never allowed.
#
# To use:
#
# First set up a pattern below. You can choose any name you want, prefixed by the word
# "Validation." For example:
#   Validation.Email=^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,4}$
# 
# Then you can validate in your code against the pattern like this:
#     ESAPI.validator().isValidInput("User Email", input, "Email", maxLength, allowNull);
# Where maxLength and allowNull are set for you needs, respectively.
#
# But note, when you use boolean variants of validation functions, you lose critical 
# canonicalization. It is preferable to use the "get" methods (which throw exceptions) and 
# and use the returned user input which is in canonical form. Consider the following:
#  
# try {
#    someObject.setEmail(ESAPI.validator().getValidInput("User Email", input, "Email", maxLength, allowNull));
#
Validator.SafeString=^[.\\p{Alnum}\\p{Space}]{0,1024}$
Validator.Email=^[A-Za-z0-9._%'-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,4}$
Validator.IPAddress=^(?\:(?\:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?\:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
Validator.URL=^(ht|f)tp(s?)\\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(\:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\\:\\'\\/\\\\\\+\=&amp;%\\$\#_]*)?$
Validator.CreditCard=^(\\d{4}[- ]?){3}\\d{4}$
Validator.SSN=^(?\!000)([0-6]\\d{2}|7([0-6]\\d|7[012]))([ -]?)(?\!00)\\d\\d\\3(?\!0000)\\d{4}$

Validator.textoDescripcion=^[A-Za-z0-9.,_%' \n\r\t-\u00F1\u00D1\u00C1\u00C9\u00CD\u00D3\u00DA\u00E1\u00E9\u00ED\u00F3\u00FA]*
Validator.textoConEspacios=^[A-Za-z0-9 Ò—¡…Õ”⁄·ÈÌÛ˙]*
Validator.textoSinEspacios=^[A-Za-z0-9Ò—¡…Õ”⁄·ÈÌÛ˙]*
Validator.textoConEspaciosSinNumeros=^[A-Za-z Ò—¡…Õ”⁄·ÈÌÛ˙]*
Validator.textoSinEspaciosSinNumeros=^[A-Za-zÒ—¡…Õ”⁄·ÈÌÛ˙]*
Validator.codigo=^[A-Za-z0-9]*
Validator.soloNumero=^[0-9]*
Validator.numeroDocumentoOtros=^[0-9]{11}
Validator.numeroDocumentoRucEcu=^[0-9]{13}
Validator.numeroDocumentoDni=^[0-9]{8}
Validator.numeroDocumentoCedula=^[0-9]{10}
Validator.usuario=^[A-Za-z0-9.]*
Validator.sexo=^(m|f|M|F)*
Validator.doubleDosDecimales=^[0-9]{1,2}.[0-9]{1,2}
Validator.numeroOperacion=^[0-9]{15}
Validator.nombreArchivo=^[A-Za-z0-9_%]*
Validator.numeroComa=^[0-9,]*
Validator.formatoFecha=^[DdMmYyHhMmSs/- ]*